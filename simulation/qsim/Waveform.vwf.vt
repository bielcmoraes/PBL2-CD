// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2022 09:05:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] Vagas;
// wires                                               
wire [1:0] Colunas;
wire [3:0] DigitoAceso;
wire [6:0] Display;
wire [3:0] Linhas;

// assign statements (if any)                          
Main i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Colunas(Colunas),
	.DigitoAceso(DigitoAceso),
	.Display(Display),
	.Linhas(Linhas),
	.Vagas(Vagas)
);
initial 
begin 
#10000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #200000 1'b1;
	#200000;
end 
// Vagas[ 7 ]
initial
begin
	Vagas[7] = 1'b1;
	Vagas[7] = #6400000 1'b0;
end 
// Vagas[ 6 ]
initial
begin
	Vagas[6] = 1'b1;
	Vagas[6] = #6400000 1'b0;
end 
// Vagas[ 5 ]
initial
begin
	Vagas[5] = 1'b1;
	Vagas[5] = #6400000 1'b0;
end 
// Vagas[ 4 ]
initial
begin
	Vagas[4] = 1'b0;
	Vagas[4] = #3200000 1'b1;
	Vagas[4] = #3200000 1'b0;
	Vagas[4] = #3200000 1'b1;
end 
// Vagas[ 3 ]
initial
begin
	repeat(3)
	begin
		Vagas[3] = 1'b0;
		Vagas[3] = #1600000 1'b1;
		# 1600000;
	end
	Vagas[3] = 1'b0;
end 
// Vagas[ 2 ]
initial
begin
	repeat(6)
	begin
		Vagas[2] = 1'b0;
		Vagas[2] = #800000 1'b1;
		# 800000;
	end
	Vagas[2] = 1'b0;
end 
// Vagas[ 1 ]
initial
begin
	repeat(12)
	begin
		Vagas[1] = 1'b0;
		Vagas[1] = #400000 1'b1;
		# 400000;
	end
	Vagas[1] = 1'b0;
end 
// Vagas[ 0 ]
always
begin
	Vagas[0] = 1'b0;
	Vagas[0] = #200000 1'b1;
	#200000;
end 
endmodule

